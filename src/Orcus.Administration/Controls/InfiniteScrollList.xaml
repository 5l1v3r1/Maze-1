<UserControl
    x:Class="Orcus.Administration.Controls.InfiniteScrollList"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:extensions="clr-namespace:Orcus.Administration.Extensions"
    xmlns:local="clr-namespace:Orcus.Administration.Controls"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:nuget="clr-namespace:Orcus.Administration.Modules.Models;assembly=Orcus.Administration.Modules"
    d:DesignHeight="450"
    d:DesignWidth="800"
    mc:Ignorable="d">
    <UserControl.Resources>
        <extensions:InfiniteScrollListItemStyleSelector x:Key="itemStyleSelector" />

        <DataTemplate DataType="{x:Type nuget:PackageDependencyMetadata}">
            <TextBlock Text="{Binding}" />
        </DataTemplate>

        <DataTemplate DataType="{x:Type nuget:PackageItemListViewModel}">
            <nuget:PackageItemControl DataContext="{Binding}" />
        </DataTemplate>

        <DataTemplate DataType="{x:Type local:LoadingStatusIndicator}">
            <Grid Margin="0,8">
                <TextBlock
                    Name="_noItemsFound"
                    HorizontalAlignment="Center"
                    FontStyle="Italic"
                    Text="Resources.Text_NoPackagesFound"
                    Visibility="Collapsed" />
                <!--  TODO  -->
                <Grid
                    Name="_progressBar"
                    Height="22"
                    HorizontalAlignment="Center"
                    Visibility="Collapsed">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <nuget:Spinner
                        Grid.Column="0"
                        Width="16"
                        Height="16"
                        Margin="3"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Visibility="{Binding Visibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Grid}, AncestorLevel=1}}" />
                    <TextBlock
                        Grid.Column="1"
                        HorizontalAlignment="Left"
                        VerticalAlignment="Center"
                        Text="{Binding Path=LoadingMessage}" />
                </Grid>
            </Grid>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding Path=Status}" Value="Loading">
                    <Setter TargetName="_progressBar" Property="Visibility" Value="Visible" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=Status}" Value="Ready">
                    <Setter TargetName="_progressBar" Property="Visibility" Value="Visible" />
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=Status}" Value="NoItemsFound">
                    <Setter TargetName="_noItemsFound" Property="Visibility" Value="Visible" />
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <!--  Template used by ListBoxItem that represents a package.  -->
        <ControlTemplate x:Key="ListBoxItemTemplate" TargetType="{x:Type ListBoxItem}">
            <Border
                x:Name="Bd"
                Padding="0"
                Background="{TemplateBinding Background}"
                BorderThickness="0"
                SnapsToDevicePixels="true">
                <ContentPresenter
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>
            <ControlTemplate.Triggers>
                <!--  set the background for IsEnabled == false  -->
                <Trigger Property="IsEnabled" Value="false">
                    <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static nuget:Brushes.ListPaneBackground}}" />
                </Trigger>

                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="True" />
                    </MultiTrigger.Conditions>
                    <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static nuget:Brushes.ContentMouseOverBrushKey}}" />
                    <Setter Property="TextBlock.Foreground" Value="{DynamicResource {x:Static nuget:Brushes.ContentMouseOverTextBrushKey}}" />
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="Selector.IsSelectionActive" Value="False" />
                        <Condition Property="IsSelected" Value="True" />
                    </MultiTrigger.Conditions>
                    <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static nuget:Brushes.ContentInactiveSelectedBrushKey}}" />
                    <Setter Property="TextBlock.Foreground" Value="{DynamicResource {x:Static nuget:Brushes.ContentInactiveSelectedTextBrushKey}}" />
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="Selector.IsSelectionActive" Value="True" />
                        <Condition Property="IsSelected" Value="True" />
                    </MultiTrigger.Conditions>
                    <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static nuget:Brushes.ContentSelectedBrushKey}}" />
                    <Setter TargetName="Bd" Property="TextBlock.Foreground" Value="{DynamicResource {x:Static nuget:Brushes.ContentSelectedTextBrushKey}}" />
                </MultiTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!--  Template used by the LoadingIndicator. We use it to disable the background change when mouse hovers over it.  -->
        <ControlTemplate x:Key="LoadingIndicatorListBoxItemTemplate" TargetType="{x:Type ListBoxItem}">
            <Border
                x:Name="Bd"
                Padding="0"
                Background="{DynamicResource {x:Static nuget:Brushes.ListPaneBackground}}"
                BorderThickness="0"
                SnapsToDevicePixels="true">
                <ContentPresenter
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
            </Border>
        </ControlTemplate>

        <!--  the base style of the ListBoxItem.  -->
        <Style x:Key="listBoxItemStyle" TargetType="{x:Type ListBoxItem}">
            <Setter Property="Padding" Value="0" />
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" />
            <Setter Property="Background" Value="Transparent" />
        </Style>

        <!--  the style of the ListBoxItem when the item is the loading status indicator.  -->
        <Style
            x:Key="loadingStatusIndicatorStyle"
            BasedOn="{StaticResource listBoxItemStyle}"
            TargetType="{x:Type ListBoxItem}">
            <Setter Property="Template" Value="{StaticResource LoadingIndicatorListBoxItemTemplate}" />
            <Setter Property="Focusable" Value="False" />
        </Style>

        <!--  the style of the ListBoxItem when the item is a package.  -->
        <Style
            x:Key="packageItemStyle"
            BasedOn="{StaticResource listBoxItemStyle}"
            TargetType="{x:Type ListBoxItem}">
            <!--
            Note that we cannot set the template property in xaml list this:

               <Setter Property="Template" Value="{StaticResource ListBoxItemTemplate}" />

            The reason is that the template references resources defined in VisualStudio, which are obviously not
            available when this is used in the standalone mode, i.e. outside of VisualStudio. So the setter is
            added by code when Standalone == false.
            -->
        </Style>

        <Style x:Key="FadeAnimationStyle" TargetType="FrameworkElement">
            <Setter Property="Visibility" Value="Hidden" />
            <Style.Triggers>
                <Trigger Property="Visibility" Value="Visible">
                    <Trigger.EnterActions>
                        <BeginStoryboard>
                            <Storyboard>
                                <DoubleAnimation
                                    Storyboard.TargetProperty="Opacity"
                                    From="0.0"
                                    To="1.0"
                                    Duration="0:0:0.7" />
                            </Storyboard>
                        </BeginStoryboard>
                    </Trigger.EnterActions>
                </Trigger>
            </Style.Triggers>
        </Style>
        <!--
            This scrollviewer template has one change from the default - a -22 margin on the verical srollbar.
            This enables the loadingStatusBar to appear to be in the listbox.
        -->
        <ControlTemplate x:Key="ScrollViewerWithScrollBarExtraLargeOnTop" TargetType="{x:Type ScrollViewer}">
            <Grid x:Name="Grid" Background="{TemplateBinding Background}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Rectangle
                    x:Name="Corner"
                    Grid.Row="1"
                    Grid.Column="1"
                    Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
                <ScrollContentPresenter
                    x:Name="PART_ScrollContentPresenter"
                    Grid.Row="0"
                    Grid.Column="0"
                    Margin="{TemplateBinding Padding}"
                    CanContentScroll="{TemplateBinding CanContentScroll}"
                    CanHorizontallyScroll="False"
                    CanVerticallyScroll="False"
                    Content="{TemplateBinding Content}"
                    ContentTemplate="{TemplateBinding ContentTemplate}" />
                <ScrollBar
                    x:Name="PART_VerticalScrollBar"
                    Grid.Row="0"
                    Grid.Column="1"
                    Margin="0,-22,0,0"
                    AutomationProperties.AutomationId="VerticalScrollBar"
                    Cursor="Arrow"
                    Maximum="{TemplateBinding ScrollableHeight}"
                    Minimum="0"
                    ViewportSize="{TemplateBinding ViewportHeight}"
                    Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                    Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                <ScrollBar
                    x:Name="PART_HorizontalScrollBar"
                    Grid.Row="1"
                    Grid.Column="0"
                    AutomationProperties.AutomationId="HorizontalScrollBar"
                    Cursor="Arrow"
                    Maximum="{TemplateBinding ScrollableWidth}"
                    Minimum="0"
                    Orientation="Horizontal"
                    ViewportSize="{TemplateBinding ViewportWidth}"
                    Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                    Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
            </Grid>
        </ControlTemplate>
    </UserControl.Resources>
    <DockPanel LastChildFill="True">
        <Border
            x:Name="_updateButtonContainer"
            Background="{DynamicResource {x:Static nuget:Brushes.LegalMessageBackground}}"
            BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}"
            BorderThickness="0,0,0,1"
            DockPanel.Dock="Top">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="auto" />
                </Grid.ColumnDefinitions>
                <CheckBox
                    x:Name="_selectAllPackages"
                    Grid.Column="0"
                    Margin="16,8"
                    VerticalAlignment="Center"
                    Checked="SelectAllPackagesCheckBox_Checked"
                    Content="{x:Static nuget:Resources.Checkbox_SelectAllPackages}"
                    Foreground="{DynamicResource {x:Static nuget:Brushes.UIText}}"
                    Unchecked="SelectAllPackagesCheckBox_Unchecked" />
                <Button
                    x:Name="_updateButton"
                    Grid.Column="2"
                    MinWidth="100"
                    MinHeight="24"
                    Margin="24,8"
                    VerticalAlignment="Center"
                    Click="_updateButton_Click"
                    Content="{x:Static nuget:Resources.Button_Update}" />
            </Grid>
        </Border>
        <Grid
            Height="22"
            Background="{DynamicResource {x:Static nuget:Brushes.ListPaneBackground}}"
            DockPanel.Dock="Top">
            <nuget:LoadingStatusBar
                x:Name="_loadingStatusBar"
                DismissClick="_loadingStatusBar_DismissClick"
                ShowMoreResultsClick="_loadingStatusBar_ShowMoreResultsClick"
                Style="{StaticResource FadeAnimationStyle}"
                Visibility="Hidden" />
        </Grid>
        <local:InfiniteScrollListBox
            x:Name="_list"
            HorizontalContentAlignment="Stretch"
            d:DataContext="{d:DesignData Source=/Design/PackageItemListViewSampleData.xaml,
                                         IsDesignTimeCreatable=True}"
            Background="{DynamicResource {x:Static nuget:Brushes.ListPaneBackground}}"
            BorderThickness="0,0,0,0"
            DockPanel.Dock="Bottom"
            Foreground="{DynamicResource {x:Static nuget:Brushes.UIText}}"
            ItemContainerStyleSelector="{DynamicResource itemStyleSelector}"
            ItemsSource="{Binding}"
            Loaded="List_Loaded"
            PreviewKeyUp="List_PreviewKeyUp"
            ScrollViewer.HorizontalScrollBarVisibility="Disabled"
            ScrollViewer.VerticalScrollBarVisibility="Visible"
            SelectionChanged="List_SelectionChanged"
            VirtualizingPanel.CacheLength="1,2"
            VirtualizingPanel.CacheLengthUnit="Page"
            VirtualizingPanel.IsVirtualizing="true"
            VirtualizingPanel.VirtualizationMode="Recycling">
            <!--  set the template to disable the background change when the IsEnabled is false.  -->
            <ListBox.Template>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <Border
                        x:Name="Bd"
                        Padding="1"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="true">
                        <ScrollViewer
                            Padding="{TemplateBinding Padding}"
                            Focusable="false"
                            Template="{StaticResource ScrollViewerWithScrollBarExtraLargeOnTop}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </ListBox.Template>
        </local:InfiniteScrollListBox>
    </DockPanel>
</UserControl>