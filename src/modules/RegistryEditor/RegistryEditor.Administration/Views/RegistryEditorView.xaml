<views:WindowUserControl
    x:Class="RegistryEditor.Administration.Views.RegistryEditorView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:TreeViewEx.Controls;assembly=Anapher.TreeViewEx"
    xmlns:controls1="clr-namespace:RegistryEditor.Administration.Controls"
    xmlns:converter="clr-namespace:Anapher.Wpf.Swan.Converter;assembly=Anapher.Wpf.Swan"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:extensions="clr-namespace:TreeViewEx.Extensions;assembly=Anapher.TreeViewEx"
    xmlns:extensions1="clr-namespace:Maze.Administration.Library.Extensions;assembly=Maze.Administration.Library"
    xmlns:listViewLayoutManager="clr-namespace:Anapher.Wpf.Swan.ListViewLayoutManager;assembly=Anapher.Wpf.Swan"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:models="clr-namespace:TreeViewEx.Controls.Models;assembly=Anapher.TreeViewEx"
    xmlns:registryData="clr-namespace:RegistryEditor.Shared.Dtos"
    xmlns:tx="http://unclassified.software/source/txtranslation"
    xmlns:viewModels="clr-namespace:RegistryEditor.Administration.ViewModels"
    xmlns:views="clr-namespace:Maze.Administration.Library.Views;assembly=Maze.Administration.Library"
    d:DataContext="{d:DesignInstance viewModels:RegistryEditorViewModel}"
    d:DesignHeight="450"
    d:DesignWidth="800"
    TaskBarIcon="../Resources/Images/Registry_16x.png"
    WindowHeight="450"
    WindowWidth="800"
    mc:Ignorable="d">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Anapher.TreeViewEx;component/Resources/Generic.xaml" />
                <ResourceDictionary Source="../Resources/VisualStudioIcons.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <converter:IsStringEmptyConverter x:Key="IsStringEmptyConverter" />

            <ContextMenu x:Key="SubKeyContextMenu" d:DataContext="{d:DesignInstance viewModels:RegistryKeyViewModel}">
                <MenuItem Command="{Binding ToggleExpansionCommand}" FontWeight="Bold">
                    <MenuItem.Style>
                        <Style BasedOn="{StaticResource MetroMenuItem}" TargetType="MenuItem">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Entries.IsExpanded}" Value="true">
                                    <Setter Property="Header" Value="{tx:T RegistryEditor:Reduce}" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Entries.IsExpanded}" Value="false">
                                    <Setter Property="Header" Value="{tx:T RegistryEditor:Expand}" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </MenuItem.Style>
                </MenuItem>
                <MenuItem
                    Command="{Binding RefreshCommand}"
                    Header="{tx:T Refresh}"
                    Icon="{StaticResource RefreshIcon}" />
                <Separator />
                <MenuItem
                    Command="{Binding CopyPathCommand}"
                    Header="{tx:T RegistryEditor:CopyKeyName}"
                    Icon="{StaticResource CopyToClipboardIcon}" />
                <MenuItem Header="{tx:T New}">
                    <MenuItem
                        Command="{Binding RelativeSource={RelativeSource AncestorType=UserControl}, Path=DataContext.CreateNewSubKeyCommand}"
                        CommandParameter="{Binding}"
                        Header="{tx:T RegistryEditor:Key}"
                        Icon="{StaticResource NewSolutionFolderIcon}" />
                </MenuItem>
                <Separator />
                <MenuItem
                    Command="{Binding RelativeSource={RelativeSource AncestorType=UserControl}, Path=DataContext.RemoveRegistryKeyCommand}"
                    CommandParameter="{Binding}"
                    Header="{tx:T Remove}"
                    Icon="{StaticResource CancelIcon}">
                    <MenuItem.Style>
                        <Style BasedOn="{StaticResource MetroMenuItem}" TargetType="MenuItem">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsRegistryHive}" Value="true">
                                    <Setter Property="IsEnabled" Value="False" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </MenuItem.Style>
                </MenuItem>
            </ContextMenu>
        </ResourceDictionary>
    </UserControl.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Border
            Margin="10"
            BorderThickness="1"
            CornerRadius=".2"
            SnapsToDevicePixels="True">
            <Border.Style>
                <Style TargetType="Border">
                    <Setter Property="BorderBrush" Value="{StaticResource GrayBrush9}" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding ElementName=ExplorerTextBox, Path=IsFocused}" Value="true">
                            <Setter Property="BorderBrush" Value="{StaticResource AccentColorBrush2}" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Border.Style>
            <controls1:StandaloneExplorerTextBox
                x:Name="ExplorerTextBox"
                Height="22"
                Margin="2,0"
                VerticalAlignment="Center"
                CurrentPath="{Binding CurrentPath, Mode=OneWay}"
                DisplayMemberPath="Selection.Value.Path"
                EnterTextCommand="{Binding NavigateToPathCommand}"
                IsInEditMode="True"
                RootItem="{Binding TreeViewModel}"
                Style="{StaticResource ExplorerTextBoxStyle}"
                ValuePath="Selection.Value.Path">
                <controls:ExplorerTextBox.HierarchyHelper>
                    <controls:PathHierarchyHelper ParentPath="Parent" ValuePath="Selection.Value.Path" />
                </controls:ExplorerTextBox.HierarchyHelper>
                <controls:ExplorerTextBox.SuggestSources>
                    <x:Array Type="models:ISuggestSource">
                        <models:AsyncAutoSuggestSource />
                    </x:Array>
                </controls:ExplorerTextBox.SuggestSources>
            </controls1:StandaloneExplorerTextBox>
        </Border>
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition
                    Width="*"
                    MinWidth="100"
                    MaxWidth="500" />
                <ColumnDefinition Width="1" />
                <ColumnDefinition Width="2*" />
            </Grid.ColumnDefinitions>
            <controls:TreeViewEx extensions:TreeViewExtensions.SelectOnRightClick="True" ItemsSource="{Binding TreeViewModel.Entries.All}">
                <TreeView.ItemContainerStyle>
                    <Style
                        d:DataContext="{d:DesignInstance viewModels:RegistryKeyViewModel}"
                        BasedOn="{StaticResource MetroTreeViewItem}"
                        TargetType="controls:TreeViewItemEx">
                        <Setter Property="IsExpanded" Value="{Binding Entries.IsExpanded, Mode=TwoWay}" />
                        <Setter Property="IsSelected" Value="{Binding Selection.IsSelected, Mode=TwoWay}" />
                        <Setter Property="BringIntoViewToken" Value="{Binding BringIntoViewToken, Mode=OneWay}" />
                        <Setter Property="ContextMenu" Value="{StaticResource SubKeyContextMenu}" />
                    </Style>
                </TreeView.ItemContainerStyle>
                <TreeView.ItemTemplate>
                    <HierarchicalDataTemplate DataType="{x:Type viewModels:RegistryKeyViewModel}" ItemsSource="{Binding Entries.All}">
                        <StackPanel Orientation="Horizontal">
                            <ContentControl>
                                <ContentControl.Style>
                                    <Style TargetType="ContentControl">
                                        <Setter Property="Content" Value="{StaticResource FolderIcon}" />
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Entries.IsExpanded}" Value="true">
                                                <Setter Property="Content" Value="{StaticResource FolderOpenIcon}" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ContentControl.Style>
                            </ContentControl>
                            <TextBlock
                                Margin="5,0"
                                VerticalAlignment="Center"
                                Text="{Binding RegistryKey.Name}" />
                        </StackPanel>
                    </HierarchicalDataTemplate>
                </TreeView.ItemTemplate>
                <TreeView.ItemsPanel>
                    <ItemsPanelTemplate>
                        <VirtualizingStackPanel
                            extensions:FrameworkElementExtensions.SupressBringIntoView="True"
                            IsVirtualizing="True"
                            VirtualizationMode="Recycling" />
                    </ItemsPanelTemplate>
                </TreeView.ItemsPanel>
            </controls:TreeViewEx>
            <GridSplitter
                Grid.Column="1"
                Margin="-3,0"
                HorizontalAlignment="Stretch"
                Background="{StaticResource GridSplitterBrush}"
                BorderBrush="Transparent"
                BorderThickness="3,0"
                Canvas.ZIndex="100" />
            <DataGrid
                Grid.Column="2"
                AutoGenerateColumns="False"
                BorderThickness="0"
                CanUserAddRows="False"
                CanUserDeleteRows="False"
                CanUserReorderColumns="True"
                CanUserResizeColumns="True"
                CanUserResizeRows="False"
                CanUserSortColumns="True"
                ItemsSource="{Binding RegistryValues}"
                SelectionMode="Single"
                UseLayoutRounding="True">
                <DataGrid.Resources>
                    <ContextMenu x:Key="ItemContextMenu">
                        <MenuItem
                            Command="{Binding RelativeSource={RelativeSource AncestorType=DataGrid}, Path=DataContext.EditRegistryValueCommand}"
                            CommandParameter="{Binding}"
                            FontWeight="Bold"
                            Header="{tx:T Edit}"
                            Icon="{StaticResource EditIcon}" />
                        <MenuItem
                            Command="{Binding RelativeSource={RelativeSource AncestorType=DataGrid}, Path=DataContext.RemoveRegistryValueCommand}"
                            CommandParameter="{Binding}"
                            Header="{tx:T Remove}"
                            Icon="{StaticResource CancelIcon}" />
                    </ContextMenu>
                </DataGrid.Resources>
                <DataGrid.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="{tx:T RegistryEditor:New}">
                            <MenuItem
                                Command="{Binding CreateRegistryValueCommand}"
                                CommandParameter="{x:Static registryData:RegistryValueType.String}"
                                Header="{tx:T RegistryEditor:Type.StringValue}" />
                            <MenuItem
                                Command="{Binding CreateRegistryValueCommand}"
                                CommandParameter="{x:Static registryData:RegistryValueType.Binary}"
                                Header="{tx:T RegistryEditor:Type.BinaryValue}" />
                            <MenuItem
                                Command="{Binding CreateRegistryValueCommand}"
                                CommandParameter="{x:Static registryData:RegistryValueType.DWord}"
                                Header="{tx:T RegistryEditor:Type.DWordValue}" />
                            <MenuItem
                                Command="{Binding CreateRegistryValueCommand}"
                                CommandParameter="{x:Static registryData:RegistryValueType.QWord}"
                                Header="{tx:T RegistryEditor:Type.QWordValue}" />
                            <MenuItem
                                Command="{Binding CreateRegistryValueCommand}"
                                CommandParameter="{x:Static registryData:RegistryValueType.MultiString}"
                                Header="{tx:T RegistryEditor:Type.MultiStringValue}" />
                            <MenuItem
                                Command="{Binding CreateRegistryValueCommand}"
                                CommandParameter="{x:Static registryData:RegistryValueType.ExpandableString}"
                                Header="{tx:T RegistryEditor:Type.ExpandableStringValue}" />
                        </MenuItem>
                    </ContextMenu>
                </DataGrid.ContextMenu>
                <DataGrid.Columns>
                    <DataGridTemplateColumn
                        Width="*"
                        Header="{tx:T Name}"
                        IsReadOnly="True">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate DataType="{x:Type viewModels:RegistryValueViewModel}">
                                <StackPanel Orientation="Horizontal">
                                    <ContentControl>
                                        <ContentControl.Style>
                                            <Style TargetType="ContentControl">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Dto.Type}" Value="{x:Static registryData:RegistryValueType.Binary}">
                                                        <Setter Property="Content" Value="{StaticResource RegistryValueBinaryTypeIcon}" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding Dto.Type}" Value="{x:Static registryData:RegistryValueType.DWord}">
                                                        <Setter Property="Content" Value="{StaticResource RegistryValueBinaryTypeIcon}" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding Dto.Type}" Value="{x:Static registryData:RegistryValueType.QWord}">
                                                        <Setter Property="Content" Value="{StaticResource RegistryValueBinaryTypeIcon}" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding Dto.Type}" Value="{x:Static registryData:RegistryValueType.MultiString}">
                                                        <Setter Property="Content" Value="{StaticResource RegistryValueStringTypeIcon}" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding Dto.Type}" Value="{x:Static registryData:RegistryValueType.ExpandableString}">
                                                        <Setter Property="Content" Value="{StaticResource RegistryValueStringTypeIcon}" />
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding Dto.Type}" Value="{x:Static registryData:RegistryValueType.String}">
                                                        <Setter Property="Content" Value="{StaticResource RegistryValueStringTypeIcon}" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </ContentControl.Style>
                                    </ContentControl>
                                    <TextBlock Margin="5,0,0,0" VerticalAlignment="Center">
                                        <TextBlock.Style>
                                            <Style TargetType="TextBlock">
                                                <Setter Property="Text" Value="{Binding Dto.Name}" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Dto.Name, Converter={StaticResource IsStringEmptyConverter}}" Value="true">
                                                        <Setter Property="Text" Value="{tx:T RegistryEditor:DefaultValue}" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBlock.Style>
                                    </TextBlock>
                                </StackPanel>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn
                        Width="*"
                        MaxWidth="120"
                        Header="{tx:T RegistryEditor:Type}"
                        IsReadOnly="True">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate DataType="{x:Type viewModels:RegistryValueViewModel}">
                                <TextBlock>
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Dto.Type}" Value="{x:Static registryData:RegistryValueType.Binary}">
                                                    <Setter Property="Text" Value="REG_BINARY" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Dto.Type}" Value="{x:Static registryData:RegistryValueType.DWord}">
                                                    <Setter Property="Text" Value="REG_DWORD" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Dto.Type}" Value="{x:Static registryData:RegistryValueType.QWord}">
                                                    <Setter Property="Text" Value="REG_QWORD" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Dto.Type}" Value="{x:Static registryData:RegistryValueType.MultiString}">
                                                    <Setter Property="Text" Value="REG_MULTI_SZ" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Dto.Type}" Value="{x:Static registryData:RegistryValueType.ExpandableString}">
                                                    <Setter Property="Text" Value="REG_EXPAND_SZ" />
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Dto.Type}" Value="{x:Static registryData:RegistryValueType.String}">
                                                    <Setter Property="Text" Value="REG_SZ" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn
                        Width="2*"
                        Header="{tx:T RegistryEditor:Data}"
                        IsReadOnly="True">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate DataType="{x:Type viewModels:RegistryValueViewModel}">
                                <TextBlock Text="{Binding ValueString}" />
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                </DataGrid.Columns>
                <DataGrid.RowStyle>
                    <Style BasedOn="{StaticResource MetroDataGridRow}" TargetType="DataGridRow">
                        <Setter Property="ContextMenu" Value="{StaticResource ItemContextMenu}" />
                        <Setter Property="extensions1:ControlExtensions.DoubleClickCommand" Value="{Binding RelativeSource={RelativeSource AncestorType=DataGrid}, Path=DataContext.EditRegistryValueCommand}" />
                        <Setter Property="extensions1:ControlExtensions.DoubleClickCommandParameter" Value="{Binding}" />
                    </Style>
                </DataGrid.RowStyle>
            </DataGrid>
        </Grid>
    </Grid>
</views:WindowUserControl>